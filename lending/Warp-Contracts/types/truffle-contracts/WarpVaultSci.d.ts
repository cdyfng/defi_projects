/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface WarpVaultSciContract
  extends Truffle.Contract<WarpVaultSciInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WarpVaultSciInstance>;
}

type AllEvents = never;

export interface WarpVaultSciInstance extends Truffle.ContractInstance {
  totalReserves(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex
   * @param account The address whose balance should be calculated after updating borrowIndex
   */
  borrowBalanceCurrent: {
    (account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(account: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * returns last calculated account's borrow balance using the prior borrowIndex
   * @param account The address whose balance should be calculated after updating borrowIndex
   */
  borrowBalancePrior(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Accrue interest then return the up-to-date exchange rate
   */
  exchangeRateCurrent: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Sender borrows stablecoin assets from the protocol to their own address
   * @param _borrowAmount The amount of the underlying asset to borrow
   * @param _borrower The borrower
   */
  _borrow: {
    (
      _borrowAmount: number | BN | string,
      _borrower: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _borrowAmount: number | BN | string,
      _borrower: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _borrowAmount: number | BN | string,
      _borrower: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _borrowAmount: number | BN | string,
      _borrower: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this function uses the onlyWC modifier which means it can only be called by the Warp Control contract*
   * repayLiquidatedLoan is a function used by the Warp Control contract to repay a loan on behalf of a liquidator
   * @param _amount is the amount of StableCoin being repayed
   * @param _borrower is the address of the borrower who took out the loan
   * @param _liquidator is the address of the account who is liquidating the loan
   */
  _repayLiquidatedLoan: {
    (
      _borrower: string,
      _liquidator: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _borrower: string,
      _liquidator: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _borrower: string,
      _liquidator: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _borrower: string,
      _liquidator: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setNewInterestModel: {
    (_newModel: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _newModel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newModel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newModel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getSCDecimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getSCAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  updateWarpControl: {
    (_warpControl: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _warpControl: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _warpControl: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _warpControl: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateTeam: {
    (_warpTeam: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _warpTeam: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _warpTeam: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _warpTeam: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  viewAccountBalance(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    totalReserves(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex
     * @param account The address whose balance should be calculated after updating borrowIndex
     */
    borrowBalanceCurrent: {
      (account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * returns last calculated account's borrow balance using the prior borrowIndex
     * @param account The address whose balance should be calculated after updating borrowIndex
     */
    borrowBalancePrior(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Accrue interest then return the up-to-date exchange rate
     */
    exchangeRateCurrent: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Sender borrows stablecoin assets from the protocol to their own address
     * @param _borrowAmount The amount of the underlying asset to borrow
     * @param _borrower The borrower
     */
    _borrow: {
      (
        _borrowAmount: number | BN | string,
        _borrower: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _borrowAmount: number | BN | string,
        _borrower: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _borrowAmount: number | BN | string,
        _borrower: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _borrowAmount: number | BN | string,
        _borrower: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this function uses the onlyWC modifier which means it can only be called by the Warp Control contract*
     * repayLiquidatedLoan is a function used by the Warp Control contract to repay a loan on behalf of a liquidator
     * @param _amount is the amount of StableCoin being repayed
     * @param _borrower is the address of the borrower who took out the loan
     * @param _liquidator is the address of the account who is liquidating the loan
     */
    _repayLiquidatedLoan: {
      (
        _borrower: string,
        _liquidator: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _borrower: string,
        _liquidator: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _borrower: string,
        _liquidator: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _borrower: string,
        _liquidator: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setNewInterestModel: {
      (_newModel: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _newModel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _newModel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _newModel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getSCDecimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getSCAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    updateWarpControl: {
      (_warpControl: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _warpControl: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _warpControl: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _warpControl: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateTeam: {
      (_warpTeam: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _warpTeam: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _warpTeam: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _warpTeam: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    viewAccountBalance(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
