/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface WarpControlContract
  extends Truffle.Contract<WarpControlInstance> {
  "new"(
    _oracle: string,
    _WVLPF: string,
    _WVSCF: string,
    _warpTeam: string,
    meta?: Truffle.TransactionDetails
  ): Promise<WarpControlInstance>;
}

export interface ImportedLPVault {
  name: "ImportedLPVault";
  args: {
    _vault: string;
    0: string;
  };
}

export interface ImportedSCVault {
  name: "ImportedSCVault";
  args: {
    _vault: string;
    0: string;
  };
}

export interface Liquidation {
  name: "Liquidation";
  args: {
    _account: string;
    liquidator: string;
    0: string;
    1: string;
  };
}

export interface NewBorrow {
  name: "NewBorrow";
  args: {
    _borrower: string;
    _StableCoin: string;
    _amountBorrowed: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface NewLPVault {
  name: "NewLPVault";
  args: {
    _newVault: string;
    0: string;
  };
}

export interface NewSCVault {
  name: "NewSCVault";
  args: {
    _newVault: string;
    _interestRateModel: string;
    0: string;
    1: string;
  };
}

export interface NotCompliant {
  name: "NotCompliant";
  args: {
    _account: string;
    _time: BN;
    0: string;
    1: BN;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface complianceReset {
  name: "complianceReset";
  args: {
    _account: string;
    _time: BN;
    0: string;
    1: BN;
  };
}

type AllEvents =
  | ImportedLPVault
  | ImportedSCVault
  | Liquidation
  | NewBorrow
  | NewLPVault
  | NewSCVault
  | NotCompliant
  | OwnershipTransferred
  | complianceReset;

export interface WarpControlInstance extends Truffle.ContractInstance {
  Oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  WVLPF(txDetails?: Truffle.TransactionDetails): Promise<string>;

  WVSCF(txDetails?: Truffle.TransactionDetails): Promise<string>;

  existingRefferalCode(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getAssetByVault(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  graceSpace(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  groups(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  groupsYourIn(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  instanceLPTracker(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  instanceSCTracker(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isInGroup(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isParticipant(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isVault(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  launchParticipants(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  lockedLPValue(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lpVaults(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  newWarpControl(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  refferalCodeToGroupName(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  refferalCodeTracker(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  scVaults(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  warpTeam(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * viewNumLPVaults returns the number of lp vaults on the warp platform*
   */
  viewNumLPVaults(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * viewNumSCVaults returns the number of stablecoin vaults on the warp platform*
   */
  viewNumSCVaults(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * viewLaunchParticipants returns an array of all launch participant addresses*
   */
  viewLaunchParticipants(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * viewAllGroups returns an array of all group addresses*
   */
  viewAllGroups(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  /**
   * viewAllMembersOfAGroup returns an array of addresses containing the addresses of every member in a group
   * @param _refferalCode is the address that acts as a referral code for a group*
   */
  viewAllMembersOfAGroup(
    _refferalCode: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * getGroupName returns the name of a group
   * @param _refferalCode is the address that acts as a referral code for a group*
   */
  getGroupName(
    _refferalCode: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * getAccountsGroup returns the refferal code address of the team an account is on
   * @param _account is the address whos team is being retrieved*
   */
  getAccountsGroup(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * createNewLPVault allows the contract owner to create a new WarpVaultLP contract for a specific LP token
   * @param _lp is the address for the LP token this Warp Vault will manage
   * @param _lpAsset1 is the address for the first asset in a pair that the LP token represents(ex: wETH in a wETH-wBTC uniswap pair)
   * @param _lpAsset2 is the address for the second asset in a pair that the LP token represents(ex: wBTC in a wETH-wBTC uniswap pair)
   * @param _lpName is the name of the LP token (ex:wETH-wBTC)*
   * @param _timelock is a variable representing the number of seconds the timeWizard will prevent withdraws and borrows from a contracts(one week is 605800 seconds)
   */
  createNewLPVault: {
    (
      _timelock: number | BN | string,
      _lp: string,
      _lpAsset1: string,
      _lpAsset2: string,
      _lpName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _timelock: number | BN | string,
      _lp: string,
      _lpAsset1: string,
      _lpAsset2: string,
      _lpName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _timelock: number | BN | string,
      _lp: string,
      _lpAsset1: string,
      _lpAsset2: string,
      _lpName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _timelock: number | BN | string,
      _lp: string,
      _lpAsset1: string,
      _lpAsset2: string,
      _lpName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  importLPVault: {
    (_lpVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _lpVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _lpVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _lpVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * createNewSCVault allows the contract owner to create a new WarpVaultLP contract for a specific LP token
   * @param _StableCoin is the address of the StableCoin this Warp Vault will manage*
   * @param _baseRatePerYear is the base rate per year(approx target base APR)
   * @param _initialExchangeRate is the intitial exchange rate(the rate at which the initial exchange of asset/ART is set)
   * @param _jumpMultiplierPerYear is the Jump Multiplier Per Year(the multiplier per block after hitting a specific utilizastion point)
   * @param _multiplierPerYear is the multiplier per year(rate of increase in interest w/ utilizastion)
   * @param _optimal is the this is the utilizastion point or "kink" at which the jump multiplier is applied
   * @param _timelock is a variable representing the number of seconds the timeWizard will prevent withdraws and borrows from a contracts(one week is 605800 seconds)
   */
  createNewSCVault: {
    (
      _timelock: number | BN | string,
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _reserveFactorMantissa: number | BN | string,
      _StableCoin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _timelock: number | BN | string,
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _reserveFactorMantissa: number | BN | string,
      _StableCoin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _timelock: number | BN | string,
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _reserveFactorMantissa: number | BN | string,
      _StableCoin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _timelock: number | BN | string,
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _reserveFactorMantissa: number | BN | string,
      _StableCoin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  importSCVault: {
    (_scVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _scVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _scVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _scVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * the refferal code for this group is the address of the msg.sender*
   * @createGroup is used to create a new group
   * @param _groupName is the name of the group being created
   */
  createGroup: {
    (_groupName: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _groupName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _groupName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _groupName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * the member being added is the msg.sender*
   * addMemberToGroup is used to add an account to a group
   * @param _refferalCode is the address used as a groups refferal code
   */
  addMemberToGroup: {
    (_refferalCode: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _refferalCode: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _refferalCode: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _refferalCode: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this function runs calculations to accrue interest for an up to date amount
   * Figures out how much of a given LP token an account is allowed to withdraw
   * @param account is the account being checked
   * @param lpToken is the address of the lpToken the user wishes to withdraw
   */
  getMaxWithdrawAllowed: {
    (
      account: string,
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      account: string,
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this function does not run calculations to accrue interest and returns the previously calculated amount
   * Figures out how much of a given LP token an account is allowed to withdraw
   * @param account is the account being checked
   * @param lpToken is the address of the lpToken the user wishes to withdraw
   */
  viewMaxWithdrawAllowed(
    account: string,
    lpToken: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * this function runs calculations to accrue interest for an up to date amount*
   * getTotalAvailableCollateralValue returns the total availible collaeral value for an account in USDC
   * @param _account is the address whos collateral is being retreived
   */
  getTotalAvailableCollateralValue: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_account: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this function does not run calculations to accrue interest and returns the previously calculated amount*
   * getTotalAvailableCollateralValue returns the total availible collaeral value for an account in USDC
   * @param _account is the address whos collateral is being retreived
   */
  viewTotalAvailableCollateralValue(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * this function runs calculations to retrieve the current price*
   * viewPriceOfCollateral returns the price of an lpToken
   * @param lpToken is the address of the lp token
   */
  viewPriceOfCollateral(
    lpToken: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * this function does not run calculations amd returns the previously calculated price*
   * getPriceOfCollateral returns the price of an lpToken
   * @param lpToken is the address of the lp token
   */
  getPriceOfCollateral: {
    (lpToken: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(lpToken: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this function runs calculations to retrieve the current price*
   * viewPriceOfToken retrieves the price of a stablecoin
   * @param amount is the amount of stablecoin
   * @param token is the address of the stablecoin
   */
  viewPriceOfToken(
    token: string,
    amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * this function does not run calculations amd returns the previously calculated price*
   * viewPriceOfToken retrieves the price of a stablecoin
   * @param amount is the amount of stablecoin
   * @param token is the address of the stablecoin
   */
  getPriceOfToken: {
    (
      token: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      token: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * viewTotalLentValue returns the total lent value for an account in USDC
   * @param _account is the account whos lent value we are calculating*
   */
  viewTotalLentValue(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * this function returns previously calculated values*
   * viewTotalBorrowedValue returns the total borrowed value for an account in USDC
   * @param _account is the account whos borrowed value we are calculating
   */
  viewTotalBorrowedValue(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * this function returns newly calculated values*
   * viewTotalBorrowedValue returns the total borrowed value for an account in USDC
   * @param _account is the account whos borrowed value we are calculating
   */
  getTotalBorrowedValue: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_account: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this function divides the input value by 3 and then adds that value to itself so it can return 2/3rds of the availible collateral as the borrow limit. If a usser has $150 USDC value in collateral this function will return $100 USDC as their borrow limit.*
   * calcBorrowLimit is used to calculate the borrow limit for an account based on the input value of their collateral
   * @param _collateralValue is the USDC value of the users collateral
   */
  calcBorrowLimit(
    _collateralValue: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * calcCollateralRequired returns the amount of collateral needed for an input borrow value
   * @param _borrowAmount is the input borrow amount*
   */
  calcCollateralRequired(
    _borrowAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * this calculation uses current values for calculations*
   * getBorrowLimit returns the borrow limit for an account
   * @param _account is the input account address
   */
  getBorrowLimit: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_account: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this calculation uses previous values for calculations*
   * getBorrowLimit returns the borrow limit for an account
   * @param _account is the input account address
   */
  viewBorrowLimit(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * borrowSC is the function an end user will call when they wish to borrow a stablecoin from the warp platform
   * @param _StableCoin is the address of the stablecoin the user wishes to borrow
   * @param _amount is the amount of that stablecoin the user wants to borrow*
   */
  borrowSC: {
    (
      _StableCoin: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _StableCoin: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _StableCoin: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _StableCoin: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * liquidateAccount is used to liquidate a non-compliant loan after it has reached its 30 minute grace period
   * @param _borrower is the address of the borrower whos loan is non-compliant*
   */
  liquidateAccount: {
    (_borrower: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _borrower: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _borrower: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _borrower: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * updateInterestRateModel allows the warp team to update the interest rate model for a stablecoin
   * @param _baseRatePerYear is the base rate per year(approx target base APR)
   * @param _jumpMultiplierPerYear is the Jump Multiplier Per Year(the multiplier per block after hitting a specific utilizastion point)
   * @param _multiplierPerYear is the multiplier per year(rate of increase in interest w/ utilizastion)
   * @param _optimal is the this is the utilizastion point or "kink" at which the jump multiplier is applied*
   * @param _token is the address of the stablecoin whos vault is having its interest rate updated
   */
  updateInterestRateModel: {
    (
      _token: string,
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * startUpgradeTimer starts a two day timer signaling that this contract will soon be updated to a new version
   * @param _newWarpControl is the address of the new Warp control contract being upgraded to*
   */
  startUpgradeTimer: {
    (_newWarpControl: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _newWarpControl: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newWarpControl: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newWarpControl: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * upgradeWarp is used to upgrade the Warp platform to use a new version of the WarpControl contract*
   */
  upgradeWarp: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * transferWarpTeam allows the wapr team address to be changed by the owner account
   * @param _newWarp is the address of the new warp team*
   */
  transferWarpTeam: {
    (_newWarp: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _newWarp: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newWarp: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newWarp: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    Oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    WVLPF(txDetails?: Truffle.TransactionDetails): Promise<string>;

    WVSCF(txDetails?: Truffle.TransactionDetails): Promise<string>;

    existingRefferalCode(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    getAssetByVault(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    graceSpace(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    groups(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    groupsYourIn(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    instanceLPTracker(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    instanceSCTracker(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    isInGroup(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isParticipant(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isVault(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    launchParticipants(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    lockedLPValue(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    lpVaults(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    newWarpControl(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    refferalCodeToGroupName(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    refferalCodeTracker(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    scVaults(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    warpTeam(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * viewNumLPVaults returns the number of lp vaults on the warp platform*
     */
    viewNumLPVaults(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * viewNumSCVaults returns the number of stablecoin vaults on the warp platform*
     */
    viewNumSCVaults(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * viewLaunchParticipants returns an array of all launch participant addresses*
     */
    viewLaunchParticipants(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * viewAllGroups returns an array of all group addresses*
     */
    viewAllGroups(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    /**
     * viewAllMembersOfAGroup returns an array of addresses containing the addresses of every member in a group
     * @param _refferalCode is the address that acts as a referral code for a group*
     */
    viewAllMembersOfAGroup(
      _refferalCode: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * getGroupName returns the name of a group
     * @param _refferalCode is the address that acts as a referral code for a group*
     */
    getGroupName(
      _refferalCode: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * getAccountsGroup returns the refferal code address of the team an account is on
     * @param _account is the address whos team is being retrieved*
     */
    getAccountsGroup(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * createNewLPVault allows the contract owner to create a new WarpVaultLP contract for a specific LP token
     * @param _lp is the address for the LP token this Warp Vault will manage
     * @param _lpAsset1 is the address for the first asset in a pair that the LP token represents(ex: wETH in a wETH-wBTC uniswap pair)
     * @param _lpAsset2 is the address for the second asset in a pair that the LP token represents(ex: wBTC in a wETH-wBTC uniswap pair)
     * @param _lpName is the name of the LP token (ex:wETH-wBTC)*
     * @param _timelock is a variable representing the number of seconds the timeWizard will prevent withdraws and borrows from a contracts(one week is 605800 seconds)
     */
    createNewLPVault: {
      (
        _timelock: number | BN | string,
        _lp: string,
        _lpAsset1: string,
        _lpAsset2: string,
        _lpName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _timelock: number | BN | string,
        _lp: string,
        _lpAsset1: string,
        _lpAsset2: string,
        _lpName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _timelock: number | BN | string,
        _lp: string,
        _lpAsset1: string,
        _lpAsset2: string,
        _lpName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _timelock: number | BN | string,
        _lp: string,
        _lpAsset1: string,
        _lpAsset2: string,
        _lpName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    importLPVault: {
      (_lpVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _lpVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _lpVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _lpVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * createNewSCVault allows the contract owner to create a new WarpVaultLP contract for a specific LP token
     * @param _StableCoin is the address of the StableCoin this Warp Vault will manage*
     * @param _baseRatePerYear is the base rate per year(approx target base APR)
     * @param _initialExchangeRate is the intitial exchange rate(the rate at which the initial exchange of asset/ART is set)
     * @param _jumpMultiplierPerYear is the Jump Multiplier Per Year(the multiplier per block after hitting a specific utilizastion point)
     * @param _multiplierPerYear is the multiplier per year(rate of increase in interest w/ utilizastion)
     * @param _optimal is the this is the utilizastion point or "kink" at which the jump multiplier is applied
     * @param _timelock is a variable representing the number of seconds the timeWizard will prevent withdraws and borrows from a contracts(one week is 605800 seconds)
     */
    createNewSCVault: {
      (
        _timelock: number | BN | string,
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _reserveFactorMantissa: number | BN | string,
        _StableCoin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _timelock: number | BN | string,
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _reserveFactorMantissa: number | BN | string,
        _StableCoin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _timelock: number | BN | string,
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _reserveFactorMantissa: number | BN | string,
        _StableCoin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _timelock: number | BN | string,
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _reserveFactorMantissa: number | BN | string,
        _StableCoin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    importSCVault: {
      (_scVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _scVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _scVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _scVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * the refferal code for this group is the address of the msg.sender*
     * @createGroup is used to create a new group
     * @param _groupName is the name of the group being created
     */
    createGroup: {
      (_groupName: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _groupName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _groupName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _groupName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * the member being added is the msg.sender*
     * addMemberToGroup is used to add an account to a group
     * @param _refferalCode is the address used as a groups refferal code
     */
    addMemberToGroup: {
      (_refferalCode: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _refferalCode: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _refferalCode: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _refferalCode: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this function runs calculations to accrue interest for an up to date amount
     * Figures out how much of a given LP token an account is allowed to withdraw
     * @param account is the account being checked
     * @param lpToken is the address of the lpToken the user wishes to withdraw
     */
    getMaxWithdrawAllowed: {
      (
        account: string,
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        account: string,
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this function does not run calculations to accrue interest and returns the previously calculated amount
     * Figures out how much of a given LP token an account is allowed to withdraw
     * @param account is the account being checked
     * @param lpToken is the address of the lpToken the user wishes to withdraw
     */
    viewMaxWithdrawAllowed(
      account: string,
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * this function runs calculations to accrue interest for an up to date amount*
     * getTotalAvailableCollateralValue returns the total availible collaeral value for an account in USDC
     * @param _account is the address whos collateral is being retreived
     */
    getTotalAvailableCollateralValue: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this function does not run calculations to accrue interest and returns the previously calculated amount*
     * getTotalAvailableCollateralValue returns the total availible collaeral value for an account in USDC
     * @param _account is the address whos collateral is being retreived
     */
    viewTotalAvailableCollateralValue(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * this function runs calculations to retrieve the current price*
     * viewPriceOfCollateral returns the price of an lpToken
     * @param lpToken is the address of the lp token
     */
    viewPriceOfCollateral(
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * this function does not run calculations amd returns the previously calculated price*
     * getPriceOfCollateral returns the price of an lpToken
     * @param lpToken is the address of the lp token
     */
    getPriceOfCollateral: {
      (lpToken: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this function runs calculations to retrieve the current price*
     * viewPriceOfToken retrieves the price of a stablecoin
     * @param amount is the amount of stablecoin
     * @param token is the address of the stablecoin
     */
    viewPriceOfToken(
      token: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * this function does not run calculations amd returns the previously calculated price*
     * viewPriceOfToken retrieves the price of a stablecoin
     * @param amount is the amount of stablecoin
     * @param token is the address of the stablecoin
     */
    getPriceOfToken: {
      (
        token: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        token: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * viewTotalLentValue returns the total lent value for an account in USDC
     * @param _account is the account whos lent value we are calculating*
     */
    viewTotalLentValue(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * this function returns previously calculated values*
     * viewTotalBorrowedValue returns the total borrowed value for an account in USDC
     * @param _account is the account whos borrowed value we are calculating
     */
    viewTotalBorrowedValue(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * this function returns newly calculated values*
     * viewTotalBorrowedValue returns the total borrowed value for an account in USDC
     * @param _account is the account whos borrowed value we are calculating
     */
    getTotalBorrowedValue: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this function divides the input value by 3 and then adds that value to itself so it can return 2/3rds of the availible collateral as the borrow limit. If a usser has $150 USDC value in collateral this function will return $100 USDC as their borrow limit.*
     * calcBorrowLimit is used to calculate the borrow limit for an account based on the input value of their collateral
     * @param _collateralValue is the USDC value of the users collateral
     */
    calcBorrowLimit(
      _collateralValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * calcCollateralRequired returns the amount of collateral needed for an input borrow value
     * @param _borrowAmount is the input borrow amount*
     */
    calcCollateralRequired(
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * this calculation uses current values for calculations*
     * getBorrowLimit returns the borrow limit for an account
     * @param _account is the input account address
     */
    getBorrowLimit: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this calculation uses previous values for calculations*
     * getBorrowLimit returns the borrow limit for an account
     * @param _account is the input account address
     */
    viewBorrowLimit(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * borrowSC is the function an end user will call when they wish to borrow a stablecoin from the warp platform
     * @param _StableCoin is the address of the stablecoin the user wishes to borrow
     * @param _amount is the amount of that stablecoin the user wants to borrow*
     */
    borrowSC: {
      (
        _StableCoin: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _StableCoin: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _StableCoin: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _StableCoin: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * liquidateAccount is used to liquidate a non-compliant loan after it has reached its 30 minute grace period
     * @param _borrower is the address of the borrower whos loan is non-compliant*
     */
    liquidateAccount: {
      (_borrower: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _borrower: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _borrower: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _borrower: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * updateInterestRateModel allows the warp team to update the interest rate model for a stablecoin
     * @param _baseRatePerYear is the base rate per year(approx target base APR)
     * @param _jumpMultiplierPerYear is the Jump Multiplier Per Year(the multiplier per block after hitting a specific utilizastion point)
     * @param _multiplierPerYear is the multiplier per year(rate of increase in interest w/ utilizastion)
     * @param _optimal is the this is the utilizastion point or "kink" at which the jump multiplier is applied*
     * @param _token is the address of the stablecoin whos vault is having its interest rate updated
     */
    updateInterestRateModel: {
      (
        _token: string,
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * startUpgradeTimer starts a two day timer signaling that this contract will soon be updated to a new version
     * @param _newWarpControl is the address of the new Warp control contract being upgraded to*
     */
    startUpgradeTimer: {
      (
        _newWarpControl: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _newWarpControl: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _newWarpControl: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _newWarpControl: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * upgradeWarp is used to upgrade the Warp platform to use a new version of the WarpControl contract*
     */
    upgradeWarp: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * transferWarpTeam allows the wapr team address to be changed by the owner account
     * @param _newWarp is the address of the new warp team*
     */
    transferWarpTeam: {
      (_newWarp: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _newWarp: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _newWarp: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _newWarp: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
