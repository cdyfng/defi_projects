/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface JumpRateModelV2Contract
  extends Truffle.Contract<JumpRateModelV2Instance> {
  "new"(
    baseRatePerYear: number | BN | string,
    multiplierPerYear: number | BN | string,
    jumpMultiplierPerYear: number | BN | string,
    kink_: number | BN | string,
    owner_: string,
    meta?: Truffle.TransactionDetails
  ): Promise<JumpRateModelV2Instance>;
}

export interface NewInterestParams {
  name: "NewInterestParams";
  args: {
    baseRatePerBlock: BN;
    multiplierPerBlock: BN;
    jumpMultiplierPerBlock: BN;
    kink: BN;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
  };
}

type AllEvents = NewInterestParams;

export interface JumpRateModelV2Instance extends Truffle.ContractInstance {
  baseRatePerBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  blocksPerYear(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Calculates the current supply rate per block
   * @param borrows The amount of borrows in the market
   * @param cash The amount of cash in the market
   * @param reserveFactorMantissa The current reserve factor for the market
   * @param reserves The amount of reserves in the market
   */
  getSupplyRate(
    cash: number | BN | string,
    borrows: number | BN | string,
    reserves: number | BN | string,
    reserveFactorMantissa: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  jumpMultiplierPerBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  kink(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  multiplierPerBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)
   * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)
   * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point
   * @param kink_ The utilization point at which the jump multiplier is applied
   * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)
   */
  updateJumpRateModel: {
    (
      baseRatePerYear: number | BN | string,
      multiplierPerYear: number | BN | string,
      jumpMultiplierPerYear: number | BN | string,
      kink_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      baseRatePerYear: number | BN | string,
      multiplierPerYear: number | BN | string,
      jumpMultiplierPerYear: number | BN | string,
      kink_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      baseRatePerYear: number | BN | string,
      multiplierPerYear: number | BN | string,
      jumpMultiplierPerYear: number | BN | string,
      kink_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      baseRatePerYear: number | BN | string,
      multiplierPerYear: number | BN | string,
      jumpMultiplierPerYear: number | BN | string,
      kink_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`
   * @param borrows The amount of borrows in the market
   * @param cash The amount of cash in the market
   * @param reserves The amount of reserves in the market (currently unused)
   */
  utilizationRate(
    cash: number | BN | string,
    borrows: number | BN | string,
    reserves: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Calculates the current borrow rate per block
   * @param borrows The amount of borrows in the market
   * @param cash The amount of cash in the market
   * @param reserves The amount of reserves in the market
   */
  getBorrowRate(
    cash: number | BN | string,
    borrows: number | BN | string,
    reserves: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    baseRatePerBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    blocksPerYear(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Calculates the current supply rate per block
     * @param borrows The amount of borrows in the market
     * @param cash The amount of cash in the market
     * @param reserveFactorMantissa The current reserve factor for the market
     * @param reserves The amount of reserves in the market
     */
    getSupplyRate(
      cash: number | BN | string,
      borrows: number | BN | string,
      reserves: number | BN | string,
      reserveFactorMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    jumpMultiplierPerBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    kink(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    multiplierPerBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)
     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)
     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point
     * @param kink_ The utilization point at which the jump multiplier is applied
     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)
     */
    updateJumpRateModel: {
      (
        baseRatePerYear: number | BN | string,
        multiplierPerYear: number | BN | string,
        jumpMultiplierPerYear: number | BN | string,
        kink_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        baseRatePerYear: number | BN | string,
        multiplierPerYear: number | BN | string,
        jumpMultiplierPerYear: number | BN | string,
        kink_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        baseRatePerYear: number | BN | string,
        multiplierPerYear: number | BN | string,
        jumpMultiplierPerYear: number | BN | string,
        kink_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        baseRatePerYear: number | BN | string,
        multiplierPerYear: number | BN | string,
        jumpMultiplierPerYear: number | BN | string,
        kink_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`
     * @param borrows The amount of borrows in the market
     * @param cash The amount of cash in the market
     * @param reserves The amount of reserves in the market (currently unused)
     */
    utilizationRate(
      cash: number | BN | string,
      borrows: number | BN | string,
      reserves: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Calculates the current borrow rate per block
     * @param borrows The amount of borrows in the market
     * @param cash The amount of cash in the market
     * @param reserves The amount of reserves in the market
     */
    getBorrowRate(
      cash: number | BN | string,
      borrows: number | BN | string,
      reserves: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
